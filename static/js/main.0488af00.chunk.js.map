{"version":3,"sources":["components/Form.jsx","components/Card.jsx","components/App.js","serviceWorker.js","index.js","image/doctor.svg"],"names":["Form","saveCita","useState","mascota","dueño","fecha","hora","sintomas","cita","setCita","message","setMessage","handlerState","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuid","htmlFor","onChange","type","cols","rows","Card","deleteCita","onClick","App","localStoreCitas","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","listcitas","filter","src","image","alt","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","module","exports"],"mappings":"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","file":"static/js/main.0488af00.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport uuid from 'uuid/dist/v4'\r\nconst Form = ({ saveCita }) => {\r\n\r\n    const [cita, setCita] = useState({\r\n        mascota: '',\r\n        dueño: '',\r\n        fecha: '',\r\n        hora: '',\r\n        sintomas: ''\r\n    });\r\n\r\n    const [message, setMessage] = useState(false)\r\n    const handlerState = (e) => {\r\n\r\n        setCita({\r\n            ...cita,\r\n            [e.target.name]: e.target.value\r\n        })\r\n\r\n    }\r\n    const submitCita = (e) => {\r\n        e.preventDefault()\r\n\r\n        //validando form\r\n        if (mascota.trim() === '' || dueño.trim() === '' || fecha.trim() === '' || hora.trim() === '' || sintomas.trim() === '') {\r\n            setMessage(true)\r\n            return;\r\n        }\r\n        //volviendo a poner false si al segundo envio es correcto\r\n        setMessage(false)\r\n        //asignando id\r\n        cita.id = uuid()\r\n\r\n        //guardando la cita\r\n        saveCita(cita)\r\n        //reiniciar el form\r\n        setCita({\r\n            mascota: '',\r\n            dueño: '',\r\n            fecha: '',\r\n            hora: '',\r\n            sintomas: ''\r\n        })\r\n    }\r\n\r\n    const { mascota, dueño, fecha, hora, sintomas } = cita\r\n\r\n    return (\r\n        <div className=\"form\" onSubmit={submitCita}>\r\n            <h3 className=\"form__title\">Crea tu cita</h3>\r\n            {message && <div className=\"message\">Para guardar tu cita debes llenar todos los campos.</div>}\r\n            <form className=\"form__content\">\r\n                <label className=\"item__label\" htmlFor=\"\">Nombre de la mascota</label>\r\n                <input value={mascota} onChange={handlerState} name=\"mascota\" className=\"item__input\" type=\"text\" />\r\n                <label className=\"item__label\" htmlFor=\"\">Nombre del dueño</label>\r\n                <input value={dueño} onChange={handlerState} name=\"dueño\" className=\"item__input\" type=\"text\" />\r\n                <label className=\"item__label\" htmlFor=\"\">Fecha</label>\r\n                <input value={fecha} onChange={handlerState} name=\"fecha\" className=\"item__input\" type=\"date\" />\r\n                <label className=\"item__label\" htmlFor=\"\">Hora</label>\r\n                <input value={hora} onChange={handlerState} name=\"hora\" className=\"item__input\" type=\"time\" />\r\n                <label className=\"item__label\" htmlFor=\"\">Sintomas</label>\r\n                <textarea value={sintomas} onChange={handlerState} name=\"sintomas\" className=\"item__textarea\" cols=\"30\" rows=\"5\"></textarea>\r\n                <button type=\"submit\" className=\"item__guardar\">Guardar cita</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nForm.propTypes = {\r\n    saveCita: PropTypes.func.isRequired\r\n}\r\nexport default Form\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nconst Card = ({ id, mascota, dueño, fecha, hora, sintomas, deleteCita }) => {\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"card__content\">\r\n                <p className=\"card__label\">Mascota: <strong>{mascota}</strong></p>\r\n                <p className=\"card__label\">Dueño: <strong>{dueño}</strong></p>\r\n                <p className=\"card__label\">Fecha: <strong>{fecha}</strong></p>\r\n                <p className=\"card__label\">Hora: <strong>{hora}</strong></p>\r\n                <p className=\"card__label\">Síntomas: <strong>{sintomas}</strong></p>\r\n                <button onClick={() => { deleteCita(id) }} className=\"card__button\">Eliminar</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nCard.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    mascota: PropTypes.string.isRequired,\r\n    dueño: PropTypes.string.isRequired,\r\n    fecha: PropTypes.string.isRequired,\r\n    hora: PropTypes.string.isRequired,\r\n    deleteCita: PropTypes.func.isRequired\r\n\r\n}\r\nexport default Card\r\n","import React, { useState, useEffect } from 'react';\n\nimport image from '../image/doctor.svg'\nimport Form from '../components/Form'\nimport Card from '../components/Card'\nconst App = () => {\n\n  let localStoreCitas = JSON.parse(localStorage.getItem('citas'))\n\n  if (!localStoreCitas) {\n    localStoreCitas = []\n  }\n\n  //almacenando citas\n  const [citas, guardarCitas] = useState(localStoreCitas)\n\n  //useefect\n  useEffect(() => {\n    localStorage.setItem('citas', JSON.stringify(citas))\n\n  }, [citas])\n\n  const saveCita = cita => {\n    guardarCitas([\n      ...citas,\n      cita\n    ])\n\n  }\n  const deleteCita = id => {\n    const listcitas = citas.filter(cita => cita.id !== id);\n    guardarCitas(listcitas)\n  }\n\n  return (\n    <div className=\"layout\">\n      <div className=\"wrapper\">\n        <div className=\"layout__content\">\n\n          <div className=\"image\">\n            <h1 className=\"title__app\">CITAS-VET</h1>\n            <img className=\"image__doctora\" src={image} alt=\"doctora imagen\" />\n          </div>\n          <Form saveCita={saveCita} />\n          <div className=\"citas\">\n            <h3 className=\"citas__title\">Administrar citas</h3>\n            <div className=\"citas__content\">\n              {citas.length <= 0 && <h2 className=\"empty\">No hay citas registradas.</h2>}\n\n              {citas.map(cita => (\n                <Card deleteCita={deleteCita} key={cita.id} id={cita.id} mascota={cita.mascota} dueño={cita.dueño} fecha={cita.fecha} hora={cita.hora} sintomas={cita.sintomas} />\n              ))}\n\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/doctor.c5a32f66.svg\";"],"sourceRoot":""}